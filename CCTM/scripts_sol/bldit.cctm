#!/bin/csh -f

# ======================= CCTMv5.2 Build Script ======================== #
# Usage: bldit.cctm >&! bldit.cctm.log                                   #
# Requirements: I/O API & netCDF libs, Your Git code repository,         #
#               a Fortran compiler, and MPI if compiling for             #
#               multiprocessor computing                                 #
# Note that this script is configured/tested for Red Hat Linux O/S       #
# The following environment variables must be set for this script to     #
# build an executable. These are set in ./config.cmaq                    #
#   setenv M3HOME  <source code Git repository base path>                #
#   setenv M3LIB   <code libraries>                                      #
# To report problems or request help with this script/program:           #
#             http://www.cmascenter.org/html/help.html                   #
# ====================================================================== #

#> AMAD development team:
#> You must "module load" the correct modules for intel, PGI, or gcc.
#> BLDMAKE will insert the compiler path into the Makefile from the
#> module-loaded environment. BLDMAKE reads the cfg.* file generated by
#> this bldit script and inserts the compiler into the generated Makefile.

 set BLD_OS = `uname -s`        ## Script set up for Linux only 
 if ( $BLD_OS != 'Linux' ) then
    echo "   $BLD_OS -> wrong bldit script for host!"
    exit 1
 endif

#> Source the config.cmaq file to set the build environment

 source ../../config.cmaq

#> Check for M3HOME and M3LIB directories:
 if ( ! -e $M3HOME || ! -e $M3LIB ) then
    echo "   $M3HOME or $M3LIB directory not found"
    exit 1
 endif
 echo "    Model repository base path: $M3HOME"
 echo "                  library path: $M3LIB"

#> If $REPO not set, default to $M3HOME
 if ( $?REPO ) then
    echo "         Model repository path: $REPO"
 else
    setenv REPO $M3HOME
    echo " default Model repository path: $REPO"
 endif

#> Source Code Repository
 setenv REPOROOT $REPO/CCTM/src    #> location of the source code for BLDMAKE
 set MODEL   = $REPOROOT
 set GlobInc = $MODEL/ICL       #> location of the global include files
 set Mechs   = $MODEL/MECHS     #> location of the chemistry mechanism defining files

#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#><#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#
#>#>#>#>#>#>#>#>#>#>#>#>#># Begin User Input Section #<#<#<#<#<#<#<#<#<#<#<#<#<#

#> user choices: base working directory and application ID
 set Base = $cwd                    #> working directory
 set APPL = v52_restruct            #> model configuration ID
 set EXEC = CCTM_${APPL}_$EXEC_ID   #> executable name for this application
 set CFG  = cfg.$EXEC               #> BLDMAKE configuration file name

#> user choice:  single or multiple processors
 set ParOpt         # set for multiple PE's; comment for single PE

#> user choice: copy source files
#set CopySrc # copy the source files into the BLD directory

#> user choice: make a Makefile
 set MakeFileOnly   # builds a Makefile to make the model, but does not compile -
                    # comment out to also compile the model (default if not set)

#> user choice: build CMAQ with true parallel I/O feature (requires ioapi3.2 and pnetcdf)
#set build_parallel_io

#> user choice: build WRF-CMAQ twoway version
#set build_twoway   # build WRF-CMAQ twoway - this cannot be set for stand-alone CMAQ

#> user choice: build CMAQ with potential vorticity free-trop O3 scaling
#set potvortO3

#>==============================================================================
#> CCTM Science Modules selection
#>
#> NOTE: For the modules with multiple choices, choose by uncommenting.
#> look in the CCTM source code repository or refer to the CMAQ documentation
#> for other possible options. Be careful. Not all options work together.
#>==============================================================================

#> generalized coordinates driver module options
 set ModDriver = driver/wrf
#set ModDriver = driver/yamo

#> horizontal domain grid configuration module
 set ModGrid   = grid/cartesian

#> model run initialization module
 set ModInit   = init/yamo

#> mass coupling concentration conversion module options
 set ModCpl    = couple/gencoor_wrf
#set ModCpl    = couple/gencoor

#> horizontal advection module
 set ModHadv   = hadv/yamo

#> vertical advection module options
 set ModVadv   = vadv/wrf
#set ModVadv   = vadv/yamo

#> horizontal diffusion
 set ModHdiff  = hdiff/multiscale

#> vertical diffusion and surface exchange
 set ModVdiff  = vdiff/acm2

#> dry deposition velocities and bi-directonal exchange
 set ModDepv   = depv/m3dry

#> anthropogenic and natural emissions
 set ModEmis   = emis/emis

#> BEIS3 in-line emissions
 set ModBiog   = biog/beis3
 
#> in-line 3-D emissions
 set ModPlmrs  = plrise/smoke

#> namelist-based chemistry species configuration options
 set ModCgrds  = spcs/cgrid_spcs_nml
#set ModCgrds  = spcs/cgrid_spcs_icl

#> inline gas-phase photolysis options
 set ModPhot   = phot/inline
#set ModPhot   = phot/table

#> chose mechanism by uncommenting
 set Mechanism = cb05e51_ae6_aq
#set Mechanism = cb05e51_ae6nvPOA_aq
#set Mechanism = cb05eh51_ae6_aq
#set Mechanism = cb05mp51_ae6_aq
#set Mechanism = cb05tucl_ae6_aq
#set Mechanism = cb05tump_ae6_aq
#set Mechanism = cb6r3_ae6_aq
#set Mechanism = cb6r3_ae6nvPOA_aq
#set Mechanism = racm2_ae6_aq
#set Mechanism = saprc07tb_ae6_aq
#set Mechanism = saprc07tc_ae6_aq
#set Mechanism = saprc07tc_ae6nvPOA_aq
#set Mechanism = saprc07tic_ae6i_aq
#set Mechanism = saprc07tic_ae6invPOA_aq
#set Mechanism = saprc07tic_ae6i_aqkmti #> if using ebi solver, use ebi_saprc07tic_ae6i_aq

#> optional inert tracer species - default: no tracer species
 set Tracer    = trac0

#> chemistry mechanism
 set ModMech   = MECHS/$Mechanism

#> gas-phase chemistry solver options
#set ModGas    = gas/smvgear
#set ModGas    = gas/ros3
 if ( $?ModGas ) then    # defined
    echo "    ===> $ModGas chemistry solver used"
 else
    set ModGas = gas/ebi_${Mechanism}
    if ( $Mechanism == saprc07tic_ae6i_aqkmti ) then
       set ModGas = gas/ebi_saprc07tic_ae6i_aq
    endif
    echo "    ===> $ModGas chemistry solver used"
 endif

#> aerosol chemistry and dynamics
 set ModAero   = aero/aero6

#> cloud dynamics and chemistry options
 set ModCloud  = cloud/acm_ae6
#set ModCloud  = cloud/acm_ae6_mp
#set ModCloud  = cloud/acm_ae6_kmt
#set ModCloud  = cloud/acm_ae6i_kmti

#> utility functions
 set ModUtil   = util/util

#> potential vorticity parameterized free-trop O3 option
 if ( $?potvortO3 ) then
    set ModPvO3 = pv_o3
 endif

#> process analysis module
 set ModPa     = procan/pa

#> process analysis option (only for previous pre-processed include file version)
#set PAOpt     = pa_noop

#>#>#>#>#>#>#>#>#>#>#>#>#>#> End User Input Section #<#<#<#<#<#<#<#<#<#<#<#<#<#
#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#>#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#<#

 set echo

 if ( $?build_twoway ) then
    set MakeFileOnly   # do not compile coupled model, only generate makefile
    set ModTwoway = twoway
 endif

 if ( $?build_parallel_io ) then
    if ( ! $?ParOpt ) then
       echo "*** ParOpt is not set: required for the build_parallel_io option"
       exit 1
    endif
    set IOAPI = ioapi_3.2
    set PIO = ( -Dparallel_io )
 else
    set IOAPI = ioapi_3.1
    set PIO = ""
 endif

 if ( $?ParOpt ) then
    set ModStenex = STENEX/se
    set ModPario = PARIO
#   set ModPar = par/par_nodistr
    set ModPar = par/mpi
 else
    set ModStenex = STENEX/noop
    set ModPar = 
 endif 

#> Set full path of Fortran 90 and C compilers
 set FC = ${myFC}
 set FP = $FC
 set CC = ${myCC}

#> Set compiler flags
 set xLib_Base  = ${M3LIB}
 set xLib_1     = $IOAPI/Linux2_${system}${compiler_ext}
 set xLib_2     = $IOAPI/ioapi/fixed_src
 set xLib_3     = mpich/include
 set FSTD       = "${myFSTD}"
 set DBG        = "${myDBG}"
 set F_FLAGS    = "${myFFLAGS}"
 set F90_FLAGS  = "${myFRFLAGS}"
 set CPP_FLAGS  = ""
 set C_FLAGS    = "${myCFLAGS} -DFLDMN -I"
 set LINK_FLAGS = "${myLINK_FLAG}"

 if ( $?ParOpt ) then      # Multiprocessor system configuration
    set PAR    = ( -Dparallel )
    set Popt   = SE
    set seL    = se_snl
    set LIB3   = "${mpi} ${extra_lib}"
    set Str1   = (// Parallel / Include message passing definitions)
    set PARIO  = $ModPario
    # MPI_INC is set in config.cmaq ("-lmpich" or "-lmpi")
 else
    echo "   Not Parallel; set Serial (no-op) flags"
    set PAR    = ""
    set Popt   = NOOP
    set seL    = sef90_noop
    set LIB3   =
    set Str1   =
    set Str2   =
    set PARIO  = "."
    set MPI_INC = "."
 endif
 set STENEX = $ModStenex

 if ( $?potvortO3 ) then    # free trop. O3 potential vorticity scaling
    set POT = ( -Dpotvorto3 )
 else
    set POT = ""
 endif 

 set LIB1 = "-lioapi"
 set LIB2 = "-lnetcdff -lnetcdf"
 
 set STX1 = ( -DSUBST_BARRIER=${Popt}_BARRIER\
              -DSUBST_GLOBAL_MAX=${Popt}_GLOBAL_MAX\
              -DSUBST_GLOBAL_MIN=${Popt}_GLOBAL_MIN\
              -DSUBST_GLOBAL_MIN_DATA=${Popt}_GLOBAL_MIN_DATA\
              -DSUBST_GLOBAL_TO_LOCAL_COORD=${Popt}_GLOBAL_TO_LOCAL_COORD\
              -DSUBST_GLOBAL_SUM=${Popt}_GLOBAL_SUM\
              -DSUBST_GLOBAL_LOGICAL=${Popt}_GLOBAL_LOGICAL\
              -DSUBST_LOOP_INDEX=${Popt}_LOOP_INDEX\
              -DSUBST_SUBGRID_INDEX=${Popt}_SUBGRID_INDEX )
 set STX2 = ( -DSUBST_HI_LO_BND_PE=${Popt}_HI_LO_BND_PE\
              -DSUBST_SUM_CHK=${Popt}_SUM_CHK\
              -DSUBST_INIT_ARRAY=${Popt}_INIT_ARRAY\
              -DSUBST_COMM=${Popt}_COMM\
              -DSUBST_MY_REGION=${Popt}_MY_REGION\
              -DSUBST_SLICE=${Popt}_SLICE\
              -DSUBST_GATHER=${Popt}_GATHER\
              -DSUBST_DATA_COPY=${Popt}_DATA_COPY\
              -DSUBST_IN_SYN=${Popt}_IN_SYN )

 set BLDER = $REPO/UTIL/bldmake/src/BLDMAKE

#> location of executable
 if ( $?ParOpt ) then
    set Blder = "$BLDER -verbose"
 else
    set Blder = "$BLDER -serial -verbose"
 endif

#> The "BLD" directory for compiling source code (and possibly copying the code to)
 set Bld = $Base/BLD_CCTM_${APPL}
 if ( ! -e "$Bld" ) then
    mkdir $Bld
 else
    if ( ! -d "$Bld" ) then
       echo "   *** target exists, but not a directory ***"
       exit 1
    endif
 endif

 cd $Bld

#source $Base/relinc.cctm
#if ( $status ) exit 1

 set ICL_CONST = $GlobInc/fixed/const
 set ICL_FILES = $GlobInc/fixed/filenames
 set ICL_EMCTL = $GlobInc/fixed/emctrl
#set ICL_PA    = $GlobInc/procan/$PAOpt
 set ICL_PAR   = $GlobInc/fixed/mpi
 if ( $?ParOpt ) then
    set ICL_MPI   = $xLib_Base/$xLib_3
 endif
#set ICL_MECH  = $Mechs/$Mechanism

 if ( $?CopySrc ) then
    /bin/cp -fp ${ICL_CONST}/*    ${Bld}
    /bin/cp -fp ${ICL_FILES}/*    ${Bld}
    /bin/cp -fp ${ICL_EMCTL}/*    ${Bld}
#   /bin/cp -fp ${ICL_PA}/*       ${Bld}
    /bin/cp -fp ${ICL_PAR}/*      ${Bld}
    if ( $?ParOpt ) then
       /bin/cp -fp ${ICL_MPI}/mpif.h ${Bld}
    endif
    set ICL_CONST = .
    set ICL_FILES = .
    set ICL_EMCTL = .
#   set ICL_PA    = .
    set ICL_PAR   = .
    if ( $?ParOpt ) then
       set ICL_MPI   = .
    endif
 endif

#> make the config file

 set Cfile = $CFG
 set quote = '"'

 echo                                                               > $Cfile
 echo "model       $EXEC;"                                         >> $Cfile
 echo                                                              >> $Cfile
 echo "repo        $MODEL;"                                        >> $Cfile
 echo                                                              >> $Cfile
 echo "mechanism   $Mechanism;"                                    >> $Cfile
 echo                                                              >> $Cfile
#echo "FPP         $FP;"                                           >> $Cfile
#echo                                                              >> $Cfile
 echo "lib_base    $xLib_Base;"                                    >> $Cfile
 echo                                                              >> $Cfile
 echo "lib_1       $xLib_1;"                                       >> $Cfile
 echo                                                              >> $Cfile
 echo "lib_2       $xLib_2;"                                       >> $Cfile
 echo                                                              >> $Cfile
 if ( $?ParOpt ) then
    echo "lib_3       $quote$xLib_3 -I.$quote;"                    >> $Cfile
    echo                                                           >> $Cfile
 endif
 set text = "$quote$CPP_FLAGS $PAR $POT $STX1 $STX2$quote;"
 echo "cpp_flags   $text"                                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f_compiler  $FC;"                                           >> $Cfile
 echo                                                              >> $Cfile
 echo "fstd        $quote$FSTD$quote;"                             >> $Cfile
 echo                                                              >> $Cfile
 echo "dbg         $quote$DBG$quote;"                              >> $Cfile
 echo                                                              >> $Cfile
 echo "f_flags     $quote$F_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f90_flags   $quote$F90_FLAGS$quote;"                        >> $Cfile
 echo                                                              >> $Cfile
 echo "c_compiler  $CC;"                                           >> $Cfile
 echo                                                              >> $Cfile
 echo "c_flags     $quote$C_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "link_flags  $quote$LINK_FLAGS$quote;"                       >> $Cfile
 echo                                                              >> $Cfile
#echo "libraries   $quote$LIBS$quote;"                             >> $Cfile
 echo "ioapi       $quote$LIB1$quote;"                             >> $Cfile
 echo                                                              >> $Cfile
 echo "netcdf      $quote$LIB2$quote;"                             >> $Cfile
 echo                                                              >> $Cfile
 if ( $?ParOpt ) then
    echo "mpich       $quote$LIB3$quote;"                          >> $Cfile
    echo                                                           >> $Cfile
 endif
#if ( $compiler == gfort ) then
#  set ICL_PAR = '.'
#  set ICL_CONST = '.'
#  set ICL_FILES = '.'
#  set ICL_EMCTL = '.'
#  set ICL_MECH = '.'
#  set ICL_PA = '.'
#endif
 echo "include SUBST_PE_COMM    $ICL_PAR/PE_COMM.EXT;"             >> $Cfile
 echo "include SUBST_CONST      $ICL_CONST/CONST.EXT;"             >> $Cfile
 echo "include SUBST_FILES_ID   $ICL_FILES/FILES_CTM.EXT;"         >> $Cfile
 echo "include SUBST_EMISPRM    $ICL_EMCTL/EMISPRM.EXT;"           >> $Cfile
 echo                                                              >> $Cfile

#set text = "// Process Analysis / Integrated Reaction Rates processing"
#echo $text                                                        >> $Cfile
#echo "include SUBST_PACTL_ID   $ICL_PA/PA_CTL.EXT;"               >> $Cfile
#echo "include SUBST_PACMN_ID   $ICL_PA/PA_CMN.EXT;"               >> $Cfile
#echo "include SUBST_PADAT_ID   $ICL_PA/PA_DAT.EXT;"               >> $Cfile
#echo                                                              >> $Cfile

 if ( $?ParOpt ) then
    echo "$Str1"                                                   >> $Cfile
    echo "include SUBST_MPI        $ICL_MPI/mpif.h;"               >> $Cfile
 endif
#if ( $compiler == gfort ) then
#   echo "include SUBST_MPI ${MPI_INC}/mpif.h;"                    >> $Cfile
#else
#   echo "$Str2"                                                   >> $Cfile
#endif
 echo                                                              >> $Cfile

 set text = "stenex or se_noop"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModStenex};"                                       >> $Cfile
 if ( $?ParOpt ) then
    set text = "// parallel executable; stenex and pario included"
    echo $text                                                     >> $Cfile
    echo "Module ${ModPario};"                                     >> $Cfile
 else
    set text = "serial executable; noop stenex"
    echo $text                                                     >> $Cfile
 endif
 echo                                                              >> $Cfile

 set text = "par, par_nodistr and par_noop"
 echo "// options are" $text                                       >> $Cfile
 if ( $?ParOpt ) then
    echo "Module ${ModPar};"                                       >> $Cfile
 endif
 echo                                                              >> $Cfile

 if ( $?build_twoway ) then
    echo "// option set for WRF-CMAQ twoway"                       >> $Cfile
    echo "Module ${ModTwoway};"                                    >> $Cfile
    echo                                                           >> $Cfile
 endif

 set text = "wrf and yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModDriver};"                                       >> $Cfile
 echo                                                              >> $Cfile

 set text = "cartesian"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModGrid};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModInit};"                                         >> $Cfile
 echo                                                              >> $Cfile

#set text = ""
#echo "// options are" $text                                       >> $Cfile
#echo "Module ${ModAdjc};"                                         >> $Cfile
#echo                                                              >> $Cfile

 set text = "gencoor_wrf and gencoor"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCpl};"                                          >> $Cfile
 echo                                                              >> $Cfile

 set text = "yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModHadv};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "wrf and yamo"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModVadv};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "multiscale"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModHdiff};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "acm2"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModVdiff};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "m3dry"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModDepv};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "emis"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModEmis};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "beis3"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModBiog};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "smoke"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModPlmrs};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "cgrid_spcs_nml and cgrid_spcs_icl"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCgrds};"                                        >> $Cfile
 echo                                                              >> $Cfile

 set text = "inline and table"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModPhot};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "gas chemistry solvers"
 echo "// " $text                                                  >> $Cfile
 set text = "smvgear, ros3, and ebi_<mech>; see 'gas chemistry mechanisms' for <mech>"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModGas};"                                          >> $Cfile
 echo                                                              >> $Cfile

 set MechList = " cb05e51_ae6_aq, cb05e51_ae6nvPOA_aq, cb05eh51_ae6_aq, cb05mp51_ae6_aq, cb05tucl_ae6_aq, cb05tump_ae6_aq, cb6r3_ae6_aq, cb6r3_ae6nvPOA_aq, racm2_ae6_aq, saprc07tb_ae6_aq, saprc07tc_ae6_aq, saprc07tc_ae6nvPOA_aq, saprc07tic_ae6i_aq, saprc07tic_ae6i_aqkmti, saprc07tic_ae6invPOA_aq"

 set text = "gas chemistry mechanisms"
 echo "// " $text                                                  >> $Cfile
 set text = "$MechList"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModMech};"                                         >> $Cfile
 echo                                                              >> $Cfile

 if ( $?potvortO3 ) then
    set text = "use potential vorticity free-troposphere O3 scaling"
    echo "// options are" $text                                    >> $Cfile
    echo "Module ${ModPvO3};"                                      >> $Cfile
    echo                                                           >> $Cfile
 endif

 set text = "aero6"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModAero};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "acm_ae6, acm_ae6_kmt, and acm_ae6_mp"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCloud};"                                        >> $Cfile
 echo                                                              >> $Cfile

#set text = "pa or pa_wrf, which require the"
#echo "// options are" $text "replacement of the three"            >> $Cfile
#set text = "// global include files with their pa_noop counterparts"
#echo $text                                                        >> $Cfile
#set text = "// pa_wrf must be used if gencoor_wrf is used for couple"
 set text = "// compile for inline process analysis"
 echo $text                                                        >> $Cfile
 echo "Module ${ModPa};"                                           >> $Cfile
 echo                                                              >> $Cfile

 set text = "util"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModUtil};"                                         >> $Cfile
 echo                                                              >> $Cfile

 if ( $?ModMisc ) then
    echo "Module ${ModMisc};"                                      >> $Cfile
    echo                                                           >> $Cfile
 endif

#> make the Makefile or the model executable

 unalias mv rm
 if ( $?MakeFileOnly ) then
    if ( $?CopySrc ) then
       $Blder -makefo $Cfile
     # totalview -a $Blder -makefo $Cfile
    else
       $Blder -makefo -git_local $Cfile   # $Cfile = $CFG
     # totalview -a $Blder -makefo -git_local $Cfile
    endif
 else   # also compile the model
    if ( $?CopySrc ) then
       $Blder $Cfile
    else
       $Blder -git_local $Cfile
    endif
 endif
 mv Makefile $Bld/Makefile.$compiler
 if ( -e Makefile.$compiler && -e Makefile ) /bin/rm Makefile
 ln -s Makefile.$compiler Makefile

 if ( $status != 0 ) then
    echo "   *** failure in $Blder ***"
    exit 1
 endif
 if ( -e "$Base/${CFG}" ) then
    echo "   >>> previous ${CFG} exists, re-naming to ${CFG}.old <<<"
    mv $Base/${CFG} $Base/${CFG}.old
 endif

 cd $MODEL
 set brnch = `git branch`
 unset echo
 @ i = 0
 while ( $i < $#brnch )
    @ i++
    if ( "$brnch[$i]" == "*" ) @ l = $i + 1
 end
 set rep = `echo $cwd | tr "/" "#"`
 set rln = "repo:${rep},branch:${brnch[$l]},compiler:${compiler}"
 set ref = $Bld/$rln
 /bin/touch $ref
 if ( -d $MODEL/branch ) /bin/cp $MODEL/branch/branch.* $Bld

 exit
